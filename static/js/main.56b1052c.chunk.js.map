{"version":3,"sources":["components/Button.js","components/ItemName.js","components/ListItem.js","components/List.js","components/InputForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","isEditing","react_default","a","createElement","className","onClick","toggleEditing","isDone","Fragment","toggleDone","handleRemove","ItemName","type","value","children","onChange","handleNameEdits","ListItem","components_ItemName","item","e","setName","target","components_Button","List","list","map","index","components_ListItem","key","name","removeItemAt","id","text","editItemAt","InputForm","onSubmit","handleNewItem","handleItemInput","pendingItem","placeholder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lastItemId","newItemId","setState","state","objectSpread","filter","handleTabs","n","displayAll","displayComp","displayIncomp","newList","renderHome","preventDefault","concat","toConsumableArray","storageData","window","localStorage","getItem","todos","JSON","parse","_this2","clear","setItem","stringify","components_InputForm","components_List","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56b1052c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = props => {\r\n  if (props.isEditing) {\r\n    return (\r\n      <button className=\"action\" onClick={props.toggleEditing}>\r\n        save\r\n      </button>\r\n    );\r\n  }\r\n\r\n    if(props.isDone){\r\n      return (   \r\n        <>   \r\n          <button className=\"action\" onClick={props.toggleDone}>  \r\n            ✅\r\n          </button>\r\n          <button className=\"action\" onClick={props.handleRemove}>\r\n            ✖\r\n          </button>\r\n        </>\r\n      );\r\n    }\r\n    if(!props.isDone){\r\n      return (\r\n        <>\r\n          <button className=\"action\" onClick={props.toggleDone}>  \r\n            ✔\r\n          </button>\r\n          <button className=\"action\" onClick={props.handleRemove}>\r\n            ✖\r\n          </button>\r\n        </>\r\n      );\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst ItemName = props => {\r\n  if (props.isEditing) {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={props.children}\r\n        onChange={props.handleNameEdits}\r\n      />\r\n    );\r\n  }\r\n  return <span onClick={props.toggleEditing}>{props.children}</span>;\r\n};\r\n\r\n\r\nexport default ItemName;\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport Button from './Button';\r\nimport ItemName from './ItemName';\r\n\r\nconst ListItem = props => {\r\n  return (\r\n    <li>\r\n      <ItemName\r\n        isEditing={props.isEditing}\r\n        isDone={props.isDone}\r\n        item={props.item}\r\n        toggleEditing={props.toggleEditing}\r\n        toggleDone={props.toggleDone}\r\n        handleNameEdits={e => props.setName(e.target.value)}\r\n      >\r\n        {props.item}\r\n      </ItemName>\r\n      <Button\r\n        isEditing={props.isEditing}\r\n        isDone={props.isDone}\r\n        toggleEditing={props.toggleEditing}\r\n        handleRemove={props.handleRemove}\r\n        toggleDone={props.toggleDone}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\n\r\nimport ListItem from './ListItem';\r\n\r\nconst List = props => {\r\n  return (\r\n    <ul>\r\n      {props.list.map((item, index) => (\r\n        <ListItem\r\n          key={index}\r\n          item={item.name}\r\n          isEditing={item.isEditing}\r\n          isDone={item.isDone}\r\n          handleRemove={() => props.removeItemAt(item.id)}\r\n          toggleEditing={() => props.toggleEditing(item.id)}          \r\n          toggleDone={() => props.toggleDone(item.id)}\r\n          setName={text => props.editItemAt(text, item.id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nconst InputForm = props => {\r\n  return (\r\n    <form onSubmit = { props.handleNewItem} className = \"todoInput\">\r\n      <input \r\n        className=\"input\"\r\n        type=\"text\"\r\n        onChange={props.handleItemInput}\r\n        value={props.pendingItem}\r\n        placeholder=\"Add a task\"\r\n      />\r\n      <button type=\"submit\" name=\"submit\" value=\"submit\">\r\n      +\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport List from './List';\r\nimport '../styles/App.css';\r\nimport InputForm from './InputForm';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const storageData = window.localStorage.getItem('todoData');\r\n    const todos = storageData ? JSON.parse(storageData) : [];\r\n\r\n    this.state = {\r\n      list: todos,\r\n      pendingItem: \"\",\r\n      displayAll: true,\r\n      displayComp: false,\r\n      displayIncomp:false\r\n    };\r\n  }\r\n\r\n\r\n\r\n  lastItemId = 0;\r\n\r\n  newItemId = () => {\r\n    const id = this.lastItemId;\r\n    this.lastItemId += 1;\r\n    return id;\r\n  };\r\n\r\n  \r\n  toggleEditing = id => {\r\n    this.setState({\r\n      list: this.state.list.map(item => {\r\n        if (id === item.id) {\r\n          return {\r\n            ...item,\r\n            isEditing: !item[\"isEditing\"]\r\n          };\r\n        }\r\n\r\n        return item;\r\n      })\r\n    });\r\n  };\r\n\r\n\r\n  toggleDone = id => {\r\n    this.setState({\r\n      list: this.state.list.map(item => {\r\n        if (id === item.id) {\r\n          return {\r\n            ...item,\r\n            isDone: !item[\"isDone\"]\r\n           };\r\n        }\r\n\r\n        return item;\r\n      })\r\n    });\r\n  };\r\n\r\n  removeItemAt = id => {\r\n    this.setState({ \r\n      list: this.state.list.filter(item => id !== item.id) \r\n    });\r\n  };\r\n\r\n  handleItemInput = e => this.setState({ \r\n    pendingItem: e.target.value \r\n  });\r\n\r\n\r\n  handleTabs = n => {\r\n    switch (n) {\r\n      case 1:\r\n        this.setState({\r\n          displayAll: true,\r\n          displayComp: false,\r\n          displayIncomp: false,\r\n          newList : this.state.list\r\n        });\r\n        break;\r\n      case 2:\r\n        this.setState({\r\n          displayAll: false,\r\n          displayComp: true,\r\n          displayIncomp: false,\r\n          newList : this.state.list.filter(item => item.isDone == true)\r\n        });\r\n        break;\r\n      case '3':\r\n        this.setState({\r\n          displayAll: false,\r\n          displayComp: false,\r\n          displayIncomp: true,\r\n          newList : this.state.list.filter(item => item.isDone == false)\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          renderHome: true\r\n        });\r\n    }\r\n  };\r\n\r\n\r\n  editItemAt = (name, id) => {\r\n    this.setState({\r\n      list: this.state.list.map(item => {\r\n        if (id === item.id) {\r\n          return {\r\n            ...item,\r\n            name\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    });\r\n  };\r\n\r\n  handleNewItem = e => {\r\n    e.preventDefault();\r\n    const id = this.newItemId();\r\n    this.setState({\r\n      list: [\r\n        {\r\n          name: this.state.pendingItem,\r\n          isEditing: false,\r\n          isDone: false,\r\n          id\r\n        },\r\n        ...this.state.list\r\n      ],\r\n      pendingItem: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    window.localStorage.clear();\r\n    window.localStorage.setItem('todoData', JSON.stringify(this.state.list));\r\n\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"title\">My Todo List</div>\r\n        <div className=\"tabs\">\r\n          <button onClick={() =>  {this.setState({\r\n            displayAll: true,\r\n            displayComp: false,\r\n            displayIncomp: false,\r\n            newList : []\r\n            });\r\n            }\r\n          }>\r\n            All Tasks\r\n        </button>\r\n        <button onClick={() =>  {this.setState({\r\n          displayAll: false,\r\n          displayComp: true,\r\n          displayIncomp: false\r\n        });\r\n            }\r\n          }>\r\n            Completed\r\n        </button>\r\n        <button onClick={() =>  {this.setState({\r\n          displayAll: false,\r\n          displayComp: true,\r\n          displayIncomp: false\r\n        });\r\n            }\r\n          }>\r\n            Remaining\r\n        </button>\r\n        \r\n        </div>\r\n        <InputForm\r\n          handleNewItem={this.handleNewItem}\r\n          handleItemInput={this.handleItemInput}\r\n          pendingItem={this.state.pendingItem}\r\n        />\r\n\r\n        {this.state.displayAll && (\r\n          <List\r\n          list={this.state.list}\r\n          removeItemAt={this.removeItemAt}\r\n          toggleDone={this.toggleDone}\r\n          toggleEditing={this.toggleEditing}\r\n          editItemAt={this.editItemAt}\r\n        />\r\n        )}\r\n\r\n        {this.state.displayComp && (\r\n          <List\r\n          list={this.state.list.filter(item => item.isDone == true)}\r\n          removeItemAt={this.removeItemAt}\r\n          toggleDone={this.toggleDone}\r\n          toggleEditing={this.toggleEditing}\r\n          editItemAt={this.editItemAt}\r\n        /> \r\n        )}\r\n\r\n        {this.state.displayIncomp && (\r\n          <List\r\n          list={this.state.list.filter(item => item.isDone == false)}\r\n          removeItemAt={this.removeItemAt}\r\n          toggleDone={this.toggleDone}\r\n          toggleEditing={this.toggleEditing}\r\n          editItemAt={this.editItemAt}\r\n        /> \r\n        )}\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}