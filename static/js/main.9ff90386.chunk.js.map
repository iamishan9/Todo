{"version":3,"sources":["components/Button.js","components/ItemName.js","components/ListItem.js","components/List.js","constant.js","components/Tabs.js","components/InputForm.js","components/App.js","utils/Storage.js","serviceWorker.js","index.js"],"names":["Button","props","isEditing","react_default","a","createElement","className","onClick","toggleEditMode","isDone","Fragment","toggleDone","handleRemove","ItemName","type","value","children","onChange","handleNameEdits","ListItem","components_ItemName","item","e","setName","target","components_Button","List","list","map","components_ListItem","key","id","name","removeItemById","text","editItem","TABS","HOME","COMPLETED","REMAINING","Tabs","setSelectedTab","InputForm","onSubmit","handleNewItemAddition","handleItemInput","pendingItem","placeholder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lastItemId","componentDidUpdate","arrayList","state","localStorage","setItem","JSON","stringify","componentDidMount","parse","getItem","length","setState","newItemId","objectSpread","filter","view","activeTab","getFilteredTodoList","preventDefault","isItemValid","concat","toConsumableArray","some","letter","components_Tabs","components_InputForm","components_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAgDeA,EAxCA,SAAAC,GACb,OAAIA,EAAMC,UAENC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASN,EAAMO,gBAA1C,QAKAP,EAAMQ,OAENN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASN,EAAMU,YAA1C,UAGAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASN,EAAMW,cAA1C,WAMDX,EAAMQ,YAAX,EAEIN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASN,EAAMU,YAA1C,UAGAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAASN,EAAMW,cAA1C,YCVOC,EAhBE,SAAAZ,GACf,OAAIA,EAAMC,UACDC,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,MAAOd,EAAMe,SAAUC,SAAUhB,EAAMiB,kBAG5Df,EAAAC,EAAAC,cAAA,QAAME,QAASN,EAAMO,gBAAiBP,EAAMe,WCiCtCG,EAlCE,SAAAlB,GACf,OACEE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAD,CACElB,UAAWD,EAAMC,UACjBO,OAAQR,EAAMQ,OACdY,KAAMpB,EAAMoB,KACZb,eAAgBP,EAAMO,eACtBG,WAAYV,EAAMU,WAClBO,gBAAiB,SAAAI,GAAC,OAAIrB,EAAMsB,QAAQD,EAAEE,OAAOT,SAE5Cd,EAAMoB,MAETlB,EAAAC,EAAAC,cAACoB,EAAD,CACEvB,UAAWD,EAAMC,UACjBO,OAAQR,EAAMQ,OACdD,eAAgBP,EAAMO,eACtBI,aAAcX,EAAMW,aACpBD,WAAYV,EAAMU,eCSXe,EA5BF,SAAAzB,GACX,OACEE,EAAAC,EAAAC,cAAA,UACGJ,EAAM0B,KAAKC,IAAI,SAAAP,GAAI,OAClBlB,EAAAC,EAAAC,cAACwB,EAAD,CACEC,IAAKT,EAAKU,GACVV,KAAMA,EAAKW,KACX9B,UAAWmB,EAAKnB,UAChBO,OAAQY,EAAKZ,OACbG,aAAc,kBAAMX,EAAMgC,eAAeZ,EAAKU,KAC9CvB,eAAgB,kBAAMP,EAAMO,eAAea,EAAKU,KAChDpB,WAAY,kBAAMV,EAAMU,WAAWU,EAAKU,KACxCR,QAAS,SAAAW,GAAI,OAAIjC,EAAMkC,SAASD,EAAMb,EAAKU,WCjBtCK,EANF,CACXC,KAAM,IACNC,UAAW,IACXC,UAAW,KCuBEC,EAhBF,SAAAvC,GAAS,IACZwC,EAAmBxC,EAAnBwC,eAER,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMkC,EAAeL,EAAKC,QAA3C,OACAlC,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMkC,EAAeL,EAAKE,aAA3C,QACAnC,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMkC,EAAeL,EAAKG,aAA3C,UCaSG,EArBG,SAAAzC,GAAK,OACrBE,EAAAC,EAAAC,cAAA,QAAMsC,SAAU1C,EAAM2C,sBAAuBtC,UAAU,aACrDH,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVQ,KAAK,OACLG,SAAUhB,EAAM4C,gBAChB9B,MAAOd,EAAM6C,YACbC,YAAY,eAEd5C,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASkB,KAAK,SAASjB,MAAM,UAA1C,WCqNWiC,cApNb,SAAAA,EAAY/C,GAAO,IAAAgD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnD,KARRuD,WAAa,EAOMP,EAUnBQ,mBAAqB,WCVhB,IAAaC,IDWZT,EAAKU,MAAMhC,KCRjBiC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUL,KDHzBT,EAcnBe,kBAAoB,WAClB,IAAMrC,EC3BKmC,KAAKG,MAAML,aAAaM,QAAQ,SD6BvCvC,GAAQA,EAAKwC,QACflB,EAAKmB,SAAS,CACZzC,UAnBasB,EAwBnBoB,UAAY,WACV,IAAMtC,EAAKkB,EAAKO,WAIhB,OAFAP,EAAKO,YAAc,EAEZzB,GA7BUkB,EAqCnBzC,eAAiB,SAAAuB,GACfkB,EAAKmB,SAAS,CACZzC,KAAMsB,EAAKU,MAAMhC,KAAKC,IAAI,SAAAP,GACxB,OAAIU,IAAOV,EAAKU,GACPmB,OAAAoB,EAAA,EAAApB,CAAA,GACF7B,EADL,CAEEnB,WAAYmB,EAAKnB,YAIdmB,OA/CM4B,EAyDnBtC,WAAa,SAAAoB,GACXkB,EAAKmB,SAAS,CACZzC,KAAMsB,EAAKU,MAAMhC,KAAKC,IAAI,SAAAP,GACxB,OAAIU,IAAOV,EAAKU,GACPmB,OAAAoB,EAAA,EAAApB,CAAA,GACF7B,EADL,CAEEZ,QAASY,EAAKZ,SAIXY,OAnEM4B,EA6EnBhB,eAAiB,SAAAF,GACfkB,EAAKmB,SAAS,CACZzC,KAAMsB,EAAKU,MAAMhC,KAAK4C,OAAO,SAAAlD,GAAI,OAAIU,IAAOV,EAAKU,QA/ElCkB,EAwFnBJ,gBAAkB,SAAAvB,GAAC,OACjB2B,EAAKmB,SAAS,CACZtB,YAAaxB,EAAEE,OAAOT,SA1FPkC,EAmGnBd,SAAW,SAACH,EAAMD,GAChBkB,EAAKmB,SAAS,CACZzC,KAAMsB,EAAKU,MAAMhC,KAAKC,IAAI,SAAAP,GACxB,OAAIU,IAAOV,EAAKU,GACPmB,OAAAoB,EAAA,EAAApB,CAAA,GACF7B,EADL,CAEEW,SAIGX,OA7GM4B,EAuHnBR,eAAiB,SAAA+B,GACfvB,EAAKmB,SAAS,CACZK,UAAWD,KAzHIvB,EAkInByB,oBAAsB,WACpB,OAAQzB,EAAKU,MAAMc,WACjB,KAAKrC,EAAKC,KACR,OAAOY,EAAKU,MAAMhC,KAEpB,KAAKS,EAAKE,UACR,OAAOW,EAAKU,MAAMhC,KAAK4C,OAAO,SAAAlD,GAAI,OAAIA,EAAKZ,SAE7C,KAAK2B,EAAKG,UACR,OAAOU,EAAKU,MAAMhC,KAAK4C,OAAO,SAAAlD,GAAI,OAAKA,EAAKZ,SAE9C,QACE,OAAOwC,EAAKU,MAAMhC,OA9ILsB,EAwJnBL,sBAAwB,SAAAtB,GACtBA,EAAEqD,iBACF,IAAM5C,EAAKkB,EAAKoB,YAEZpB,EAAK2B,YAAY3B,EAAKU,MAAMb,cAC9BG,EAAKmB,SAAS,CACZzC,KAAI,GAAAkD,OAAA3B,OAAA4B,EAAA,EAAA5B,CACCD,EAAKU,MAAMhC,MADZ,CAEF,CACEK,KAAMiB,EAAKU,MAAMb,YACjB5C,WAAW,EACXO,QAAQ,EACRsB,QAGJe,YAAa,MAvKAG,EAkLnB2B,YAAc,SAAAvD,GACZ,GAAIA,GAAiB,OAATA,GAAiB6B,OAAA4B,EAAA,EAAA5B,CAAI7B,GAAM0D,KAAK,SAAAC,GAAM,MAAe,MAAXA,IACpD,OAAO,GAjLT/B,EAAKU,MAAQ,CACXhC,KAAM,GACNmB,YAAa,GACb2B,UAAWrC,EAAKC,MANDY,wEA8LjB,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBACAH,EAAAC,EAAAC,cAAC4E,EAAD,CAAMxC,eAAgBW,KAAKX,eAAgBgC,UAAWrB,KAAKO,MAAMc,YACjEtE,EAAAC,EAAAC,cAAC6E,EAAD,CACEtC,sBAAuBQ,KAAKR,sBAC5BC,gBAAiBO,KAAKP,gBACtBC,YAAaM,KAAKO,MAAMb,cAG1B3C,EAAAC,EAAAC,cAAC8E,EAAD,CACExD,KAAMyB,KAAKsB,sBACXzC,eAAgBmB,KAAKnB,eACrBtB,WAAYyC,KAAKzC,WACjBH,eAAgB4C,KAAK5C,eACrB2B,SAAUiB,KAAKjB,mBArNPiD,aECEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ff90386.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst Button = props => {\n  if (props.isEditing) {\n    return (\n      <button className=\"action\" onClick={props.toggleEditMode}>\n        save\n      </button>\n    );\n  }\n  if (props.isDone) {\n    return (\n      <>\n        <button className=\"action\" onClick={props.toggleDone}>\n          ✅\n        </button>\n        <button className=\"action\" onClick={props.handleRemove}>\n          ✖\n        </button>\n      </>\n    );\n  }\n  if (!props.isDone) {\n    return (\n      <>\n        <button className=\"action\" onClick={props.toggleDone}>\n          ✔\n        </button>\n        <button className=\"action\" onClick={props.handleRemove}>\n          ✖\n        </button>\n      </>\n    );\n  }\n};\n\nButton.propTypes = {\n  handleRemove: PropTypes.func.isRequired,\n  toggleEditMode: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool.isRequired\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst ItemName = props => {\n  if (props.isEditing) {\n    return <input type=\"text\" value={props.children} onChange={props.handleNameEdits} />;\n  }\n\n  return <span onClick={props.toggleEditMode}>{props.children}</span>;\n};\n\nItemName.propTypes = {\n  item: PropTypes.string.isRequired,\n  handleNameEdits: PropTypes.func.isRequired,\n  toggleEditMode: PropTypes.func.isRequired,\n  isEditing: PropTypes.func.isRequired,\n  children: PropTypes.func.isRequired\n};\n\nexport default ItemName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from './Button';\nimport ItemName from './ItemName';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst ListItem = props => {\n  return (\n    <li>\n      <ItemName\n        isEditing={props.isEditing}\n        isDone={props.isDone}\n        item={props.item}\n        toggleEditMode={props.toggleEditMode}\n        toggleDone={props.toggleDone}\n        handleNameEdits={e => props.setName(e.target.value)}\n      >\n        {props.item}\n      </ItemName>\n      <Button\n        isEditing={props.isEditing}\n        isDone={props.isDone}\n        toggleEditMode={props.toggleEditMode}\n        handleRemove={props.handleRemove}\n        toggleDone={props.toggleDone}\n      />\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  item: PropTypes.string.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  toggleEditMode: PropTypes.func.isRequired,\n  toggleDone: PropTypes.func.isRequired,\n  isDone: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListItem from './ListItem';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst List = props => {\n  return (\n    <ul>\n      {props.list.map(item => (\n        <ListItem\n          key={item.id}\n          item={item.name}\n          isEditing={item.isEditing}\n          isDone={item.isDone}\n          handleRemove={() => props.removeItemById(item.id)}\n          toggleEditMode={() => props.toggleEditMode(item.id)}\n          toggleDone={() => props.toggleDone(item.id)}\n          setName={text => props.editItem(text, item.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nList.propTypes = {\n  list: PropTypes.array.isRequired,\n  removeItemById: PropTypes.func.isRequired,\n  toggleEditMode: PropTypes.func.isRequired,\n  toggleDone: PropTypes.func.isRequired,\n  editItem: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default List;\n","const TABS = {\n  HOME: 'h',\n  COMPLETED: 'c',\n  REMAINING: 'r'\n};\n\nexport default TABS;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TABS from '../constant';\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst Tabs = props => {\n  const { setSelectedTab } = props;\n\n  return (\n    <div className=\"tabs\">\n      <button onClick={() => setSelectedTab(TABS.HOME)}>All</button>\n      <button onClick={() => setSelectedTab(TABS.COMPLETED)}>Done</button>\n      <button onClick={() => setSelectedTab(TABS.REMAINING)}>Left</button>\n    </div>\n  );\n};\n\nTabs.propTypes = {\n  setSelectedTab: PropTypes.func.isRequired\n};\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nconst InputForm = props => (\n  <form onSubmit={props.handleNewItemAddition} className=\"todoInput\">\n    <input\n      className=\"input\"\n      type=\"text\"\n      onChange={props.handleItemInput}\n      value={props.pendingItem}\n      placeholder=\"Add a task\"\n    />\n    <button type=\"submit\" name=\"submit\" value=\"submit\">\n      +\n    </button>\n  </form>\n);\n\nInputForm.propTypes = {\n  handleNewItemAddition: PropTypes.func.isRequired,\n  handleItemInput: PropTypes.func.isRequired,\n  pendingItem: PropTypes.string.isRequired\n};\n\nexport default InputForm;\n","import React, { Component } from 'react';\n\nimport List from './List';\nimport Tabs from './Tabs';\nimport TABS from '../constant';\nimport InputForm from './InputForm';\nimport { get, set } from '../utils/Storage.js';\n\n/**\n * This is the main class.\n */\nclass App extends Component {\n  lastItemId = 0;\n\n  /**\n   * Creates an instance of App.\n   *\n   * @param {object} props Props from the parent.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: [],\n      pendingItem: '',\n      activeTab: TABS.HOME\n    };\n  }\n\n  componentDidUpdate = () => {\n    set(this.state.list);\n  };\n\n  componentDidMount = () => {\n    const list = get();\n\n    if (list && list.length) {\n      this.setState({\n        list\n      });\n    }\n  };\n\n  newItemId = () => {\n    const id = this.lastItemId;\n\n    this.lastItemId += 1;\n\n    return id;\n  };\n\n  /**\n   *\n   *\n   * @param {number} id\n   */\n  toggleEditMode = id => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (id === item.id) {\n          return {\n            ...item,\n            isEditing: !item.isEditing\n          };\n        }\n\n        return item;\n      })\n    });\n  };\n\n  /**\n   *\n   *\n   * @param {*} id\n   */\n  toggleDone = id => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (id === item.id) {\n          return {\n            ...item,\n            isDone: !item.isDone\n          };\n        }\n\n        return item;\n      })\n    });\n  };\n\n  /**\n   *\n   *\n   * @param {*} id\n   */\n  removeItemById = id => {\n    this.setState({\n      list: this.state.list.filter(item => id !== item.id)\n    });\n  };\n\n  /**\n   *\n   *\n   * @param {*} e\n   */\n  handleItemInput = e =>\n    this.setState({\n      pendingItem: e.target.value\n    });\n\n  /**\n   *\n   *\n   * @param {*} name\n   * @param {*} id\n   */\n  editItem = (name, id) => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (id === item.id) {\n          return {\n            ...item,\n            name\n          };\n        }\n\n        return item;\n      })\n    });\n  };\n\n  /**\n   *\n   *\n   * @param {*} view\n   */\n  setSelectedTab = view => {\n    this.setState({\n      activeTab: view\n    });\n  };\n\n  /**\n   *\n   *\n   * @returns {Array} Returns the array of list.\n   */\n  getFilteredTodoList = () => {\n    switch (this.state.activeTab) {\n      case TABS.HOME:\n        return this.state.list;\n\n      case TABS.COMPLETED:\n        return this.state.list.filter(item => item.isDone);\n\n      case TABS.REMAINING:\n        return this.state.list.filter(item => !item.isDone);\n\n      default:\n        return this.state.list;\n    }\n  };\n\n  /**\n   *\n   *\n   * @param {*} e\n   * \n   */\n  handleNewItemAddition = e => {\n    e.preventDefault();\n    const id = this.newItemId();\n\n    if (this.isItemValid(this.state.pendingItem)) {\n      this.setState({\n        list: [\n          ...this.state.list,\n          {\n            name: this.state.pendingItem,\n            isEditing: false,\n            isDone: false,\n            id\n          }\n        ],\n        pendingItem: ''\n      });\n    }\n  };\n\n  /**\n   *\n   *\n   * @param {*} item\n   * \n   */\n  isItemValid = item => {\n    if (item && item !== null && [...item].some(letter => letter !== ' ')) {\n      return true;\n    }\n  };\n  /**\n   *\n   *\n   * @returns\n   * @memberof App\n   */\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"title\">My Todo List</div>\n        <Tabs setSelectedTab={this.setSelectedTab} activeTab={this.state.activeTab} />\n        <InputForm\n          handleNewItemAddition={this.handleNewItemAddition}\n          handleItemInput={this.handleItemInput}\n          pendingItem={this.state.pendingItem}\n        />\n\n        <List\n          list={this.getFilteredTodoList()}\n          removeItemById={this.removeItemById}\n          toggleDone={this.toggleDone}\n          toggleEditMode={this.toggleEditMode}\n          editItem={this.editItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/**\n *\n *\n *\n * @returns\n */\nexport function get() {\n  const list = JSON.parse(localStorage.getItem('list'));\n\n  return list;\n}\n\n\n/**\n *\n *\n *\n * @param {*} arrayList\n */\nexport function set(arrayList) {\n  // const arrayList = this.state.list;\n\n  localStorage.setItem('list', JSON.stringify(arrayList));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/public';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}